import React from 'react';
import { Trophy, Target, Clock, Zap } from 'lucide-react';
import { StorageManager } from '../utils/storage';
import type { GameSession } from '../types';
import bossesData from '../data/bosses.json';
import exercisesData from '../data/exercises.json';

const difficultyLabels: Record<string, string> = {
  easy: '–ª–µ–≥–∫–∏–π',
  medium: '—Å—Ä–µ–¥–Ω–∏–π',
  hard: '—Å–ª–æ–∂–Ω—ã–π'
};

const Results: React.FC = () => {
  const storageManager = new StorageManager();
  const sessions = storageManager.getSessions();
  const stats = storageManager.getStats();

  const getBossById = (id: string) => bossesData.find(b => b.id === id);
  const getExerciseById = (id: string) => exercisesData.find(e => e.id === id);

  const recentSessions = sessions.slice(0, 10);

  return (
    <div className="p-4 pb-20 max-w-3xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∏—Ç–≤</h1>

      {/* Stats Overview */}
      <div className="grid grid-cols-2 gap-4 mb-6">
        <div className="bg-gray-800/80 backdrop-blur p-4 rounded-xl shadow-lg">
          <div className="flex items-center gap-2 mb-2">
            <Trophy className="text-yellow-500" size={20} />
            <span className="text-sm text-gray-300">–ü–æ–±–µ–¥—ã</span>
          </div>
          <div className="text-2xl font-bold">{stats.victories}</div>
          <div className="text-xs text-gray-400">
            {stats.totalSessions > 0 ? Math.round((stats.victories / stats.totalSessions) * 100) : 0}% –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥
          </div>
        </div>

        <div className="bg-gray-800/80 backdrop-blur p-4 rounded-xl shadow-lg">
          <div className="flex items-center gap-2 mb-2">
            <Zap className="text-orange-500" size={20} />
            <span className="text-sm text-gray-300">–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è</span>
          </div>
          <div className="text-2xl font-bold">{stats.streak}</div>
          <div className="text-xs text-gray-400">–±–∏—Ç–≤</div>
        </div>

        <div className="bg-gray-800/80 backdrop-blur p-4 rounded-xl shadow-lg">
          <div className="flex items-center gap-2 mb-2">
            <Target className="text-blue-500" size={20} />
            <span className="text-sm text-gray-300">–í—Å–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–æ–≤</span>
          </div>
          <div className="text-2xl font-bold">{stats.totalReps}</div>
          <div className="text-xs text-gray-400">
            {stats.totalSessions > 0 ? Math.round(stats.totalReps / stats.totalSessions) : 0} –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ —Å–µ—Å—Å–∏—é
          </div>
        </div>

        <div className="bg-gray-800/80 backdrop-blur p-4 rounded-xl shadow-lg">
          <div className="flex items-center gap-2 mb-2">
            <Clock className="text-green-500" size={20} />
            <span className="text-sm text-gray-300">–õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</span>
          </div>
          <div className="text-2xl font-bold">{Math.round(stats.bestAccuracy)}%</div>
          <div className="text-xs text-gray-400">–ø–∏–∫–æ–≤–∞—è —Ñ–æ—Ä–º–∞</div>
        </div>
      </div>

      {/* Recent Sessions */}
      <div className="mb-6">
        <h2 className="text-xl font-semibold mb-4">–ù–µ–¥–∞–≤–Ω–∏–µ –±–∏—Ç–≤—ã</h2>
        
        {recentSessions.length === 0 ? (
          <div className="bg-gray-800/80 backdrop-blur p-6 rounded-xl shadow-lg text-center">
            <div className="text-4xl mb-3">‚öîÔ∏è</div>
            <p className="text-gray-300">–ü–æ–∫–∞ –Ω–µ—Ç –±–∏—Ç–≤!</p>
            <p className="text-sm text-gray-400 mt-1">–ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é –±–∏—Ç–≤—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–¥–µ—Å—å</p>
          </div>
        ) : (
          <div className="space-y-3">
            {recentSessions.map((session: GameSession) => {
              const boss = getBossById(session.bossId);
              const exercise = getExerciseById(session.exerciseId);
              
              return (
                <div
                  key={session.id}
                  className={`bg-gray-800/80 backdrop-blur p-4 rounded-xl border-2 shadow-lg ${
                    session.victory ? 'border-green-500/50' : 'border-red-500/50'
                  }`}
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <span className="text-2xl">{boss?.avatar || '‚ùì'}</span>
                      <div>
                        <div className="font-semibold text-sm">{boss?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Å—Å'}</div>
                        <div className="text-xs text-gray-400">
                          {exercise?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ'}
                        </div>
                      </div>
                    </div>
                    <div className={`text-2xl ${session.victory ? 'text-green-500' : 'text-red-500'}`}>
                      {session.victory ? 'üèÜ' : 'üíÄ'}
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-4 text-center">
                    <div>
                      <div className="text-lg font-bold text-blue-500">{session.reps}</div>
                      <div className="text-xs text-gray-400">–ü–æ–≤—Ç–æ—Ä—ã</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-purple-500">{Math.round(session.accuracy)}%</div>
                      <div className="text-xs text-gray-400">–¢–æ—á–Ω–æ—Å—Ç—å</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-orange-500">{session.duration}s</div>
                      <div className="text-xs text-gray-400">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
                    </div>
                  </div>
                  
                  <div className="text-xs text-gray-500 mt-2">
                    {new Date(session.timestamp).toLocaleDateString()} –≤ {new Date(session.timestamp).toLocaleTimeString()}
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>

      {/* Boss Progress */}
      <div className="mb-6">
        <h2 className="text-xl font-semibold mb-4">–ü—Ä–æ–≥—Ä–µ—Å—Å –±–æ—Å—Å–æ–≤</h2>
        <div className="space-y-3">
          {bossesData.map((boss) => {
            const bossVictories = sessions.filter(s => s.bossId === boss.id && s.victory).length;
            const bossAttempts = sessions.filter(s => s.bossId === boss.id).length;
            const winRate = bossAttempts > 0 ? Math.round((bossVictories / bossAttempts) * 100) : 0;
            
            return (
              <div key={boss.id} className="bg-gray-800/80 backdrop-blur p-4 rounded-xl shadow-lg border border-gray-700">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <span className="text-2xl">{boss.avatar}</span>
                    <div>
                      <div className="font-semibold">{boss.name}</div>
                      <div className={`text-xs capitalize ${
                        boss.difficulty === 'easy' ? 'text-green-500' :
                        boss.difficulty === 'medium' ? 'text-yellow-500' : 'text-red-500'
                      }`}>
                        {difficultyLabels[boss.difficulty]} - {boss.maxHP} HP
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-lg font-bold">{bossVictories}/{bossAttempts}</div>
                    <div className="text-xs text-gray-400">{winRate}% –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥</div>
                  </div>
                </div>
                
                {bossAttempts > 0 && (
                  <div className="w-full bg-gray-700 rounded-full h-2">
                    <div
                      className="bg-gradient-to-r from-green-500 to-green-600 h-2 rounded-full"
                      style={{ width: `${winRate}%` }}
                    />
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default Results;
